import Head from 'next/head'
import styles from '../styles/Home.module.css'
import {useRouter} from "next/router";
import * as React from "react";
import {useEffect, useState} from "react";

const oauth2Addr = "https://oauth2.disism.com"

// If not logged in, the user is required to log in,
// and if logging in is complete, the token is saved,
// proving that the user is logged in. The consent and deny components will then be
// displayed and if consent is selected, the authorization
// code will be requested and carried back to the requested instance.
const handleAuth = async (username: string, password: string) => {
  const formdata = new FormData();
  formdata.append("username", username);
  formdata.append("password", password);

  const requestOptions: RequestInit = {
    method: 'POST',
    body: formdata,
    redirect: 'follow'
  };

  const x = await fetch(`${oauth2Addr}/oauth/auth`, requestOptions)
  return x.json()
}

const handleSignup = async (username: string, mail: string, password: string) => {
  const formdata = new FormData();
  formdata.append("username", username);
  formdata.append("mail", mail);
  formdata.append("password", password);

  const requestOptions: RequestInit = {
    method: 'POST',
    body: formdata,
    redirect: 'follow'
  };

  const x = await fetch( `${oauth2Addr}/oauth/signup`, requestOptions)
  return x.json()
}

export default function Home() {
  const [username, setUsername] = useState("")
  const [mail, setMail] = useState("")
  const [password, setPassword] = useState("")
  const [isAuth, setIsAuth] = useState(true)
  const [isLogin, setIsLogin] = useState(true)
  const router = useRouter()

  useEffect(() => {
    const token = localStorage.getItem("oauth_access_token")
    if (token == null) {
      setIsLogin(false)
    }
  }, [])

  const login = async () => {
    const x =  await handleAuth(username, password)
    console.log(x)
    if (x.status === "ok") {
      localStorage.setItem("oauth_access_token", x.access_token)
      setIsLogin(true)
    }
  }

  const signup = async () => {
    const x = await handleSignup(username, mail, password)
    if (x.status === "ok") {
      setIsAuth(true)
    }
  }

  const accept = () => {
    const token = localStorage.getItem("oauth_access_token")
    const myHeaders = new Headers();
    myHeaders.append("Authorization", `Bearer ${token}`);

    const requestOptions: RequestInit = {
      method: 'GET',
      headers: myHeaders,
      redirect: 'follow'
    };

    fetch(`http://localhost:9096/api/v1/authorize?response_type=code&client_id=${router.query.client_id}&redirect_uri=${router.query.redirect_uri}&scope=${router.query.scope}`, requestOptions)
      .then(response => response.json())
      .then(result => {
        console.log(result)
        router.push(result.callback)
      })
      .catch(error => console.log('error', error));
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          {
            isLogin
            ?
              <section>
                <div>
                  <button onClick={() => accept()}>Accept</button> | <button>Reject</button>
                </div>
              </section>
              :

              <section>
                {isAuth
                  ?
                  <div className="flex">
                    <div>
                      <label>Username</label>
                      <input
                        type="text"
                        onChange={e => setUsername(e.target.value)}
                      />
                    </div>
                    <div>
                      <label>Password</label>
                      <input type="password"
                             onChange={e => setPassword(e.target.value)}
                      />
                    </div>
                    <div>
                      <button
                        className="p-5 m-2 bg-orange-400"
                        onClick={() => login()}>Login</button>
                      <br/>
                      <p>Don't have an account yet?</p>
                      <button
                        className="underline underline-offset-1"
                        onClick={() => setIsAuth(false)}>signup</button>
                    </div>
                  </div>
                  :
                  <div className="flex">
                    <h1>Signup</h1>
                    <div>
                      <label>Username</label>
                      <input type="text"
                             onChange={e => setUsername(e.target.value)}
                      />
                    </div>
                    <div>
                      <label>Mail</label>
                      <input type="text"
                             onChange={e => setMail(e.target.value)}/>
                    </div>
                    <div>
                      <label>Password</label>
                      <input type="password"
                             onChange={e => setPassword(e.target.value)}
                      />
                    </div>
                    <button
                      className="p-5 m-2 bg-orange-400"
                      onClick={() => signup()}>Login</button>
                    <p>Already have an account?</p>
                    <button onClick={() => setIsAuth(true)}>auth</button>
                  </div>
                }
              </section>
          }
        </div>
      </main>
    </>
  )
}
